.\" Copyright (c) 2015-2017 Nuxi, https://nuxi.nl/
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.Dd August 29, 2017
.Dt CLOUDABI-RUN 1
.Os
.Sh NAME
.Nm cloudabi-run
.Nd "execute CloudABI processes"
.Sh SYNOPSIS
.Nm
.Op Fl e
.Ar path
.Sh DESCRIPTION
CloudABI is a purely capability-based runtime environment,
meaning that access to system resources is solely based on the set of
file descriptor that the process possesses.
For example,
CloudABI processes can only access a file if it possesses a file
descriptor for that file or one of its parent directories.
This makes it critical that a CloudABI process is provided the right set
of file descriptors on startup.
.Pp
The problem with providing a set of file descriptors on startup is that
the file descriptors either need to be placed at fixed indices or that a
separate configuration file describes the purpose of each file
descriptor.
The latter is hard to accomplish,
due to the fact that CloudABI programs cannot open configuration files
from arbitrary locations on the filesystem.
.Pp
To simplify program configuration and at the same time make it easier to
safely set up the initial set of file descriptors,
CloudABI processes can be launched using the
.Nm
utility.
.Nm
executes a CloudABI program stored at a
.Ar path
and provides it a copy of YAML data read from standard input.
The YAML data is provided in an already parsed form and can be accessed
by using the alternative entry point
.Fn program_main :
.Bd -literal -offset indent
#include <program.h>

void program_main(const argdata_t *ad);
.Ed
.Pp
The YAML data can be traversed by using the
.In argdata.h
functions
.Fn argdata_get_binary ,
.Fn argdata_get_bool ,
.Fn argdata_get_float ,
.Fn argdata_get_int ,
.Fn argdata_get_str ,
.Fn argdata_get_str_c ,
.Fn argdata_get_timestamp ,
.Fn argdata_map_iterate ,
and
.Fn argdata_seq_iterate .
The names of these functions correspond to the respective YAML types.
.Pp
By default,
.Nm
executes the process with an empty set of file descriptors.
File descriptors can be granted to the process by attaching them to the
YAML data as objects using specialized YAML tags.
The CloudABI process can obtain the file descriptor numbers of these
objects by calling
.Fn argdata_get_fd .
.Pp
CloudABI executables can be executed directly on operating systems that
have a compatibility layer for CloudABI executables.
Alternatively,
.Nm
includes a built-in emulator that can be enabled by providing the
.Fl e
flag.
The use of this emulator is strongly discouraged if the operating system
provides native support for CloudABI.
.Sh YAML TAGS
The following YAML tags can be used to provide resources to CloudABI
processes:
.Bl -tag -width "Four"
.It Cm "tag:nuxi.nl,2015:cloudabi/fd: int"
Exposes a file descriptor by decimal file descriptor number,
or the special values
.Dq Li stdout
and
.Dq Li stderr .
.It Cm "tag:nuxi.nl,2015:cloudabi/file: map"
Opens a file for reading.
File objects have the following attributes:
.Bl -tag -width "Four"
.It Cm "path: str"
The path of the file.
.El
.It Cm "tag:nuxi.nl,2015:cloudabi/flower_switchboard_handle: map"
Creates a handle to a Flower switchboard instance.
The Flower switchboard is a daemon that allows programs to access the
network in a capability-based fashion.
These objects have the following attributes:
.Bl -tag -width "Four"
.It Cm "switchboard_path: str"
The path at which the Flower switchboard daemon has bound its UNIX
domain socket.
.It Cm "constraints: flower.protocol.switchboard.ConstrainRequest"
Security constraints that should be placed on the handle provided to the
process.
This allows for restricting access to parts of the switchboard's address
space.
.El
.El
.Sh EXAMPLES
The following example shows a program that writes a fixed message to all
of the file descriptors stored in a sequence.
With the configuration provided,
it writes the message to standard output three times in a row.
.Bd -literal -offset indent
$ cat hello.c
#include <argdata.h>
#include <program.h>
#include <stdio.h>
#include <stdlib.h>

void program_main(const argdata_t *ad) {
  argdata_seq_iterator_t it;
  argdata_seq_iterate(ad, &it);
  const argdata_t *value;
  while (argdata_seq_get(&it, &value)) {
    int fd;
    if (argdata_get_fd(value, &fd) == 0)
      dprintf(fd, "Hello, world\\n");
    argdata_seq_next(&it);
  }
  exit(0);
}
$ cat hello.yaml
%TAG ! tag:nuxi.nl,2015:cloudabi/
---
- !fd stdout
- !fd stdout
- !fd stdout
$ x86_64-unknown-cloudabi-cc -o hello hello.c
$ cloudabi-run hello < hello.yaml
Hello, world
Hello, world
Hello, world
.Ed
.Pp
Below is a web server that writes fixed responses to incoming requests.
With the commands invoked,
it listens on TCP port 12345.
.Bd -literal -offset indent
$ cat webserver.cc
#include <sys/socket.h>

#include <program.h>
#include <unistd.h>

#include <cstdlib>
#include <memory>
#include <thread>

#include <arpc++/arpc++.h>
#include <flower/protocol/server.ad.h>
#include <flower/protocol/switchboard.ad.h>
#include <argdata.hpp>

using arpc::ClientContext;
using arpc::CreateChannel;
using arpc::FileDescriptor;
using arpc::ServerBuilder;
using arpc::ServerContext;
using arpc::Status;
using flower::protocol::server::ConnectRequest;
using flower::protocol::server::ConnectResponse;
using flower::protocol::server::Server;
using flower::protocol::switchboard::ServerStartRequest;
using flower::protocol::switchboard::ServerStartResponse;
using flower::protocol::switchboard::Switchboard;

namespace {

class FixedResponseServer : public Server::Service {
 public:
  Status Connect(ServerContext* context, const ConnectRequest* request,
                 ConnectResponse* response) override {
    // Process the request asynchronously.
    std::thread([connection{request->client()}]() {
      // Write a fixed HTTP response.
      const char response[] =
          "HTTP/1.1 200 OK\\r\\n"
          "Content-Type: text/plain\\r\\n"
          "Content-Length: 13\\r\\n\\r\\n"
          "Hello, world\\n";
      write(connection->get(), response, sizeof(response) - 1);

      // Wait for the client to close the connection.
      shutdown(connection->get(), SHUT_WR);
      char discard[4096];
      while (read(connection->get(), discard, sizeof(discard)) > 0) {
      }
    })
        .detach();
    return Status::OK;
  }
};

}  // namespace

void program_main(const argdata_t* ad) {
  // Start a server through the switchboard.
  ServerStartResponse response;
  {
    std::shared_ptr<Switchboard::Stub> stub = Switchboard::NewStub(
        CreateChannel(std::make_unique<FileDescriptor>(ad->as_fd())));
    ClientContext context;
    ServerStartRequest request;
    if (Status status = stub->ServerStart(&context, request, &response);
        !status.ok())
      std::exit(1);
  }

  // Process incoming requests.
  ServerBuilder builder(response.server());
  FixedResponseServer fixed_response_server;
  builder.RegisterService(&fixed_response_server);
  for (auto server = builder.Build(); server->HandleRequest() == 0;) {
  }
  std::exit(1);
}
$ cat webserver.yaml
%TAG ! tag:nuxi.nl,2015:cloudabi/
---
!flower_switchboard_handle
  switchboard_path: /tmp/switchboard
  constraints:
    rights: [SERVER_START]
    in_labels:
      prog: webserver
$ x86_64-unknown-cloudabi-c++ -o webserver webserver.cc -std=c++1z -larpc
$ flower_switchboard /tmp/switchboard &
$ cloudabi-run webserver < webserver.yaml &
$ flower_ingress_accept 0.0.0.0:12345 /tmp/switchboard '{"prog": "webserver"}' &
$ curl http://localhost:12345/
Hello, world
.Ed
.Sh IMPLEMENTATION NOTES
.Nm
invokes a helper utility called
.Nm cloudabi-reexec
before executing the executable stored at
.Ar path .
.Nm cloudabi-reexec
is a CloudABI executable that merely acts as a proxy to guarantee that
the process already runs in capabilities mode before executing the
requested binary,
making it safe to run
.Nm
on third-party executables.
.Pp
As CloudABI's
.Fn program_exec
function scans the argument data to obtain a list of file descriptors
that need to be retained in the new process,
.Nm
guarantees that any file descriptors that are not specified in the YAML
data are closed.
File descriptors are renumbered to be contiguous, starting at file
descriptor zero.
.Pp
The emulator makes no attempt to sandbox the execution of running
processes.
It should therefore only be used for development and testing purposes.
Using it in production is strongly discouraged.
.Sh AUTHORS
CloudABI has been developed by Nuxi, the Netherlands:
.Pa https://nuxi.nl/ .
